/**
 * 
 * This file was automatically generated by the Repast Simphony Agent Editor.
 * Please see http://repast.sourceforge.net/ for details.
 * 
 */

/**
 *
 * Set the package name.
 *
 */
package Consumers

/**
 *
 * Import the needed packages.
 *
 */
import java.io.*
import java.math.*
import java.util.*
import javax.measure.unit.*
import org.jscience.mathematics.number.*
import org.jscience.mathematics.vector.*
import org.jscience.physics.amount.*
import repast.simphony.adaptation.neural.*
import repast.simphony.adaptation.regression.*
import repast.simphony.context.*
import repast.simphony.context.space.continuous.*
import repast.simphony.context.space.gis.*
import repast.simphony.context.space.graph.*
import repast.simphony.context.space.grid.*
import repast.simphony.engine.environment.*
import repast.simphony.engine.schedule.*
import repast.simphony.engine.watcher.*
import repast.simphony.groovy.math.*
import repast.simphony.integration.*
import repast.simphony.matlab.link.*
import repast.simphony.query.*
import repast.simphony.query.space.continuous.*
import repast.simphony.query.space.gis.*
import repast.simphony.query.space.graph.*
import repast.simphony.query.space.grid.*
import repast.simphony.query.space.projection.*
import repast.simphony.parameter.*
import repast.simphony.random.*
import repast.simphony.space.continuous.*
import repast.simphony.space.gis.*
import repast.simphony.space.graph.*
import repast.simphony.space.grid.*
import repast.simphony.space.projection.*
import repast.simphony.ui.probe.*
import repast.simphony.util.*
import simphony.util.messages.*
import static java.lang.Math.*
import static repast.simphony.essentials.RepastEssentials.*
import Persons.*
import Appliances.*
import java.util.Vector

/**
 *
 * This is an agent.
 *
 */
public class HouseHold  {

    /**
     *
     * This is an agent property.
     * @field name
     *
     */
    @Parameter (displayName = "Name", usageName = "name")
    public String getName() {
        return name
    }
    public void setName(String newValue) {
        name = newValue
    }
    public String name = ""

    /**
     *
     * This is an agent property.
     * @field members
     *
     */
    @Parameter (displayName = "Members", usageName = "members")
    public Vector getMembers() {
        return members
    }
    public void setMembers(Vector newValue) {
        members = newValue
    }
    public Vector members = new Vector()

    /**
     *
     * This is an agent property.
     * @field appliances
     *
     */
    @Parameter (displayName = "Appliances", usageName = "appliances")
    public Vector getAppliances() {
        return appliances
    }
    public void setAppliances(Vector newValue) {
        appliances = newValue
    }
    public Vector appliances = new Vector()

    /**
     *
     * This is an agent property.
     * @field dailyLoad
     *
     */
    @Parameter (displayName = "Daily Load", usageName = "dailyLoad")
    public Vector getDailyLoad() {
        return dailyLoad
    }
    public void setDailyLoad(Vector newValue) {
        dailyLoad = newValue
    }
    public Vector dailyLoad = new Vector()

    /**
     *
     * This is an agent property.
     * @field weeklyLoad
     *
     */
    @Parameter (displayName = "Weekly Load", usageName = "weeklyLoad")
    public Vector getWeeklyLoad() {
        return weeklyLoad
    }
    public void setWeeklyLoad(Vector newValue) {
        weeklyLoad = newValue
    }
    public Vector weeklyLoad = new Vector()

    /**
     *
     * This is an agent property.
     * @field yearConsumption
     *
     */
    @Parameter (displayName = "Year Consumption", usageName = "yearConsumption")
    public int getYearConsumption() {
        return yearConsumption
    }
    public void setYearConsumption(int newValue) {
        yearConsumption = newValue
    }
    public int yearConsumption = 0

    /**
     *
     * This is an agent property.
     * @field dailyLoadInHours
     *
     */
    @Parameter (displayName = "Daily Load In Hours", usageName = "dailyLoadInHours")
    public Vector getDailyLoadInHours() {
        return dailyLoadInHours
    }
    public void setDailyLoadInHours(Vector newValue) {
        dailyLoadInHours = newValue
    }
    public Vector dailyLoadInHours = new Vector()

    /**
     *
     * This is an agent property.
     * @field weeklyLoadInHours
     *
     */
    @Parameter (displayName = "Weekly Load In Hours", usageName = "weeklyLoadInHours")
    public Vector getWeeklyLoadInHours() {
        return weeklyLoadInHours
    }
    public void setWeeklyLoadInHours(Vector newValue) {
        weeklyLoadInHours = newValue
    }
    public Vector weeklyLoadInHours = new Vector()

    /**
     *
     * This is an agent property.
     * @field currentLoad
     *
     */
    @Parameter (displayName = "Current Load", usageName = "currentLoad")
    public int getCurrentLoad() {
        return currentLoad
    }
    public void setCurrentLoad(int newValue) {
        currentLoad = newValue
    }
    public int currentLoad = 0

    /**
     *
     * This value is used to automatically generate agent identifiers.
     * @field serialVersionUID
     *
     */
    private static final long serialVersionUID = 1L

    /**
     *
     * This value is used to automatically generate agent identifiers.
     * @field agentIDCounter
     *
     */
    protected static long agentIDCounter = 1

    /**
     *
     * This value is the agent's identifier.
     * @field agentID
     *
     */
    protected String agentID = "HouseHold " + (agentIDCounter++)

    /**
     *
     * This is the step behavior.
     * @method initialize
     *
     */
    public def initialize(String HouseName) {

        // This is a task.
        Config configuration = new Config();
        configuration.readConf();
        HashMap hm = configuration.hm
        int days = (int)hm.get("PublicVacationDuration")
        Vector publicVacationVector = createPublicVacationVector(days)
        // This is a task.
        setName(HouseName)
        int persons = memberRandomizer(hm)

        // This is a loop.
        for (int i = 0;i < persons; i++) {

            // This is a task.
            addPerson(i+1,hm,publicVacationVector)

        }

        // This is a task.
        fillAppliances(hm)

        // This is a loop.
        for (int i =0;i < 7;i++) {

            // This is a task.
            setDailyLoad(fillDailyLoad(i))
            weeklyLoad.add(dailyLoad)
            setDailyLoadInHours(fillDailyLoadInHours())
            weeklyLoadInHours.add(dailyLoadInHours)

        }

        // This is a task.
        showStatus()
    }

    /**
     *
     * This is the step behavior.
     * @method addPerson
     *
     */
    public def addPerson(int counter, HashMap hm, Vector publicVacationVector) {

        // This is a task.
        int pp = (int)hm.get("PeriodicPresent")
        int mp = (int)hm.get("MostlyPresent")
        int ra = (int)hm.get("RandomlyAbsent")
        float va = (float)hm.get("VacationAbsence")
        int x = (int) RandomDraw(0.0, 100.0)

        // This is an agent decision.
        if (x < pp) {

            // This is a task.
            PeriodicPresentPerson ppp = new PeriodicPresentPerson()
            ppp.initialize("PPP" + counter,hm,publicVacationVector)
            members.add(ppp)
            ppp.setMemberOf(this)
            ppp.weeklyRoutine = ppp.fillWeeklyRoutine(va)

        } else  {


            // This is an agent decision.
            if (x >= pp & x < (pp + mp)) {

                // This is a task.
                MostlyPresentPerson mpp = new MostlyPresentPerson()
                mpp.initialize("MPP" + counter,hm,publicVacationVector)
                members.add(mpp)
                mpp.setMemberOf(this)
                mpp.weeklyRoutine = mpp.fillWeeklyRoutine(va)

            } else  {

                // This is a task.
                RandomlyAbsentPerson rap = new RandomlyAbsentPerson()
                rap.initialize("RAP"+ counter,hm,publicVacationVector)
                members.add(rap)
                rap.setMemberOf(this)
                rap.weeklyRoutine = rap.fillWeeklyRoutine(va)

            }

        }
    }

    /**
     *
     * This is the step behavior.
     * @method memberRandomizer
     *
     */
    public int memberRandomizer(HashMap hm) {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // This is a task.
        int one = (int) hm.get("OnePerson")
        int two = (int) hm.get("TwoPersons")
        int three = (int) hm.get("ThreePersons")
        int four = (int) hm.get("FourPersons")
        int five = (int) hm.get("FivePersons")
        // This is a task.
        int x = (int) RandomDraw(0.0, 100.0)

        // This is an agent decision.
        if (x < one) {

            // This is a task.
            setYearConsumption((int) hm.get("OnePersonConsumption"))
            returnValue = 1

        } else  {


            // This is an agent decision.
            if (x >= one &  x < (one + two)) {

                // This is a task.
                setYearConsumption((int) hm.get("TwoPersonsConsumption"))
                returnValue = 2

            } else  {


                // This is an agent decision.
                if (x >= (one + two) & x < (one + two + three)) {

                    // This is a task.
                    setYearConsumption((int) hm.get("ThreePersonsConsumption"))
                    returnValue = 3

                } else  {


                    // This is an agent decision.
                    if (x >= (one + two + three) & x < (one + two + three + four)) {

                        // This is a task.
                        setYearConsumption((int) hm.get("FourPersonsConsumption"))
                        returnValue = 4

                    } else  {

                        // This is a task.
                        setYearConsumption((int) hm.get("FivePersonsConsumption"))
                        returnValue = 5

                    }

                }

            }

        }
        // Return the results.
        return returnValue

    }

    /**
     *
     * This is the step behavior.
     * @method checkProbability
     *
     */
    public def checkProbability(Appliance app) {

        // This is a task.
        int x = (int) RandomDraw(0.0, 100.0)
        int threshold = app.saturation * 100

        // This is an agent decision.
        if (x < threshold) {

            // This is a task.
            appliances.add(app)
            app.fillWeeklyFunction()

        } else  {


        }
    }

    /**
     *
     * This is the step behavior.
     * @method fillAppliances
     *
     */
    public def fillAppliances(HashMap hm) {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // This is a task.
        Refrigerator ref = new Refrigerator();
        ref.setMemberOf(this)
        ref.initialize(hm);
        appliances.add(ref)
        ref.fillWeeklyFunction()
        // This is a task.
        WashingMachine wm = new WashingMachine();
        wm.setMemberOf(this)
        wm.initialize(hm);
        appliances.add(wm)
        wm.fillWeeklyFunction()
        ConsumerElectronics ce = new ConsumerElectronics();
        ce.setMemberOf(this)
        ce.initialize(hm);
        appliances.add(ce)
        ce.fillWeeklyFunction()
        ICT ict = new ICT();
        ict.setMemberOf(this)
        ict.initialize(hm);
        appliances.add(ict)
        ict.fillWeeklyFunction()
        Lights lights = new Lights();
        lights.setMemberOf(this)
        lights.initialize(hm);
        appliances.add(lights)
        lights.fillWeeklyFunction()
        Others others = new Others();
        others.setMemberOf(this)
        others.initialize(hm);
        appliances.add(others)
        others.fillWeeklyFunction()
        Freezer fr = new Freezer()
        fr.setMemberOf(this)
        fr.initialize(hm)
        checkProbability(fr)
        Dishwasher dw = new Dishwasher()
        dw.setMemberOf(this)
        dw.initialize(hm)
        checkProbability(dw)
        Stove st = new Stove()
        st.setMemberOf(this)
        st.initialize(hm)
        checkProbability(st)
        Dryer dr = new Dryer()
        dr.setMemberOf(this)
        dr.initialize(hm)
        checkProbability(dr)
        WaterHeater wh = new WaterHeater()
        wh.setMemberOf(this)
        wh.initialize(hm)
        checkProbability(wh)
        CirculationPump cp = new CirculationPump()
        cp.setMemberOf(this)
        cp.initialize(hm)
        checkProbability(cp)
        SpaceHeater sh = new SpaceHeater()
        sh.setMemberOf(this)
        sh.initialize(hm)
        checkProbability(sh)
        // Return the results.
        return returnValue

    }

    /**
     *
     * This is the step behavior.
     * @method isEmpty
     *
     */
    public boolean isEmpty(int quarter) {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // This is a task.
        boolean x = true

        // This is a loop.
        for (int i = 0;i < members.size();i ++) {


            // This is an agent decision.
            if (members.get(i).getDailyRoutine().get(quarter-1) == Status.Normal || members.get(i).getDailyRoutine().get(quarter-1) == Status.Sick) {

                // This is a task.
                x = false

            } else  {


            }

        }

        // This is a task.
        returnValue = x
        // Return the results.
        return returnValue

    }

    /**
     *
     * This is the step behavior.
     * @method showStatus
     *
     */
    public def showStatus() {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // This is a task.
        System.out.println("HouseHold Name : " + name)
        System.out.println("HouseHold Yearl Consumption : " + yearConsumption)
        System.out.println("Number of Persons : " + getMembers().size())
        ListIterator iter = members.listIterator();

        // This is a loop.
        while (iter.hasNext()) {

            // This is a task.
            iter.next().showStatus();

        }

        // This is a task.
        iter = appliances.listIterator();
        System.out.println(" Number Of Appliances = ")
        System.out.println(appliances.size())

        // This is a loop.
        while (iter.hasNext()) {

            // Show member's status
            iter.next().showStatus();

        }

        // This is a task.
        System.out.println(" Weekly Load = ")

        // This is a loop.
        for (int i = 0; i < 7;i++) {

            // This is a task.
            System.out.println("Day " + (i))
            iter = weeklyLoad.get(i).listIterator();

            // This is a loop.
            for (int j = 0;j < 96; j++) {

                // This is a task.
                System.out.println("Quarter : " + (j+1) + " Load : " + iter.next())

            }


        }

        // This is a task.
        System.out.println(" Weekly Load In Hours = ")

        // This is a loop.
        for (int i = 0; i < 7;i++) {

            // This is a task.
            System.out.println("Day " + (i))
            iter = weeklyLoadInHours.get(i).listIterator();

            // This is a loop.
            for (int j = 0;j < 24; j++) {

                // Print Daily Load
                System.out.println("Hours : " + (j+1) + " Load : " + iter.next())

            }


        }

        // Return the results.
        return returnValue

    }

    /**
     *
     * This is the step behavior.
     * @method fillDailyLoad
     *
     */
    public Vector fillDailyLoad(int weekday) {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // This is a task.
        Vector v = new Vector(96)
        int sum = 0

        // This is a loop.
        for (int i = 0;i < 96; i++) {

            // This is a task.
            sum = 0 

            // This is a loop.
            for (int j=0;j < appliances.size();j++) {

                // This is a task.
                sum = sum + appliances.get(j).weeklyLoadVector.get(weekday).get(i)

            }

            // This is a task.
            v.add(sum)

        }

        // This is a task.
        returnValue = v
        // Return the results.
        return returnValue

    }

    /**
     *
     * This is the step behavior.
     * @method isOnVacation
     *
     */
    public boolean isOnVacation(int quarter) {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // This is a task.
        boolean x = false

        // This is a loop.
        for (int i = 0;i < members.size();i ++) {


            // This is an agent decision.
            if (members.get(i).getDailyRoutine().get(quarter-1) == Status.Vacation) {

                // This is a task.
                x = true

            } else  {


            }

        }

        // This is a task.
        returnValue = x
        // Return the results.
        return returnValue

    }

    /**
     *
     * This is the step behavior.
     * @method step
     *
     */
    @ScheduledMethod(
        start = 1d,
        interval = 1d,
        shuffle = true
    )
    public def step() {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // This is a task.
        int counter = (int) GetTickCount();
        int weekday = (int) (counter / 96)
        int quarter = (int) (counter %  96)
        ListIterator iter = members.listIterator();

        // This is an agent decision.
        if (quarter ==0) {

            // This is a task.
            quarter = 96
            weekday--
            System.out.println("Weekday:  " + weekday + "  Quarter: " + quarter)
            System.out.println("Person Quarter Status")

        } else  {

            // This is a task.
            System.out.println("Weekday:  " + weekday + "  Quarter: " + quarter)
            System.out.println("Person Quarter Status")

        }

        // This is a loop.
        for (int i = 0;i < members.size();i++) {

            // This is a task.
            System.out.println("Name: " + members.get(i).getName() + " Status: " + members.get(i).getWeeklyRoutine().get(weekday).get(quarter-1))

        }

        // This is a task.
        System.out.println("Appliances Quarter Status")

        // This is a loop.
        for (int i = 0;i < appliances.size();i++) {

            // This is a task.
            System.out.println("Name: " + appliances.get(i).getName() + " Status: " + appliances.get(i).getWeeklyOperation().get(weekday).get(quarter-1) + " Load: " +  appliances.get(i).getWeeklyLoadVector().get(weekday).get(quarter-1))

        }

        // This is a task.
        setCurrentLoad(weekday,quarter)
        System.out.println("Current Load: " + currentLoad)

        // This is an agent decision.
        if (quarter == 96) {

            // This is a task.
            iter = weeklyLoadInHours.get(weekday).listIterator()
            System.out.println("Summary of Daily Load")

            // This is a loop.
            for (int j = 0;j < 24; j++) {

                // This is a task.
                System.out.println("Hour : " + (j+1) + " Load : " + iter.next())

            }


            // This is an agent decision.
            if (weekday == 1 && quarter == 96) {

                // This is a task.
                iter = members.listIterator()
                System.out.println("Refresh Weekly Routine Of Household Members")

                // This is a loop.
                while (iter.hasNext()) {

                    // This is a task.
                    iter.next().refresh(hm)

                }

                // This is a task.
                iter = appliances.listIterator()
                System.out.println("Refresh Weekly Functions of Appliances")

                // This is a loop.
                while (iter.hasNext()) {

                    // This is a task.
                    iter.next().refresh(hm)

                }


            } else  {


            }

        } else  {


        }
        // Return the results.
        return returnValue

    }

    /**
     *
     * This is the step behavior.
     * @method fillDailyLoadInHours
     *
     */
    public Vector fillDailyLoadInHours() {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // This is a task.
        Vector v = new Vector(24)
        int sum = 0

        // This is a loop.
        for (int i = 0;i < 24; i++) {

            // This is a task.
            sum = 0 
            sum = dailyLoad.get(i*4) + dailyLoad.get(i*4 +1) + dailyLoad.get(i*4+2) + dailyLoad.get(i*4+3)
            v.add(sum)

        }

        // This is a task.
        returnValue = v
        // Return the results.
        return returnValue

    }

    /**
     *
     * This is the step behavior.
     * @method createPublicVacationVector
     *
     */
    public Vector createPublicVacationVector(int days) {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // This is a task.
        Vector v = new Vector(days)

        // This is a loop.
        for (int i = 0; i < days; i++) {

            // This is a task.
            int x = (int) (RandomDraw(0.0,364.0) + 1)
            ListIterator iter = v.listIterator();

            // This is a loop.
            while (iter.hasNext()) {

                // This is a task.
                int temp = (int)iter.next()

                // This is an agent decision.
                if (x == temp) {

                    // This is a task.
                    x = x + 1
                    iter = v.listIterator();

                } else  {


                }

            }

            // This is a task.
            v.add(x)

        }

        // This is a task.
        java.util.Collections.sort(v);
        returnValue = v
        // Return the results.
        return returnValue

    }

    /**
     *
     * This is the step behavior.
     * @method setCurrentLoad
     *
     */
    public def setCurrentLoad(int weekday, int quarter) {

        // This is a task.
        setCurrentLoad(weeklyLoad.get(weekday).get(quarter-1))
    }

    /**
     *
     * This method provides a human-readable name for the agent.
     * @method toString
     *
     */
    @ProbeID()
    public String toString() {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // Set the default agent identifier.
        returnValue = this.agentID
        // Return the results.
        return returnValue

    }


}

