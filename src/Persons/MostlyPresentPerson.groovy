/**
 * 
 * This file was automatically generated by the Repast Simphony Agent Editor.
 * Please see http://repast.sourceforge.net/ for details.
 * 
 */

/**
 *
 * Set the package name.
 *
 */
package Persons

/**
 *
 * Import the needed packages.
 *
 */
import java.io.*
import java.math.*
import java.util.*
import javax.measure.unit.*
import org.jscience.mathematics.number.*
import org.jscience.mathematics.vector.*
import org.jscience.physics.amount.*
import repast.simphony.adaptation.neural.*
import repast.simphony.adaptation.regression.*
import repast.simphony.context.*
import repast.simphony.context.space.continuous.*
import repast.simphony.context.space.gis.*
import repast.simphony.context.space.graph.*
import repast.simphony.context.space.grid.*
import repast.simphony.engine.environment.*
import repast.simphony.engine.schedule.*
import repast.simphony.engine.watcher.*
import repast.simphony.groovy.math.*
import repast.simphony.integration.*
import repast.simphony.matlab.link.*
import repast.simphony.query.*
import repast.simphony.query.space.continuous.*
import repast.simphony.query.space.gis.*
import repast.simphony.query.space.graph.*
import repast.simphony.query.space.grid.*
import repast.simphony.query.space.projection.*
import repast.simphony.parameter.*
import repast.simphony.random.*
import repast.simphony.space.continuous.*
import repast.simphony.space.gis.*
import repast.simphony.space.graph.*
import repast.simphony.space.grid.*
import repast.simphony.space.projection.*
import repast.simphony.ui.probe.*
import repast.simphony.util.*
import simphony.util.messages.*
import static java.lang.Math.*
import static repast.simphony.essentials.RepastEssentials.*
import java.util.Vector

/**
 *
 * This is an agent.
 *
 */
public class MostlyPresentPerson extends Person  {

    /**
     *
     * This value is used to automatically generate agent identifiers.
     * @field serialVersionUID
     *
     */
    private static final long serialVersionUID = 1L

    /**
     *
     * This value is used to automatically generate agent identifiers.
     * @field agentIDCounter
     *
     */
    protected static long agentIDCounter = 1

    /**
     *
     * This value is the agent's identifier.
     * @field agentID
     *
     */
    protected String agentID = "MostlyPresentPerson " + (agentIDCounter++)

    /**
     *
     * This is the step behavior.
     * @method initialize
     *
     */
    public def initialize(String AgentName, HashMap hm, Vector publicVacationVector) {

        // This is a task.
        float sicknessMean = ((float)hm.get("SicknessMean"))
        float sicknessDev = ((float)hm.get("SicknessDev"))
        float leisureDurationMean = ((int)hm.get("LeisureDurationMean"))
        float leisureDurationDev = ((int)hm.get("LeisureDurationDev"))
        float MPLeisure = ((int)hm.get("MPLeisure"))
        // This is a task.
        name = AgentName
        status = Status.Normal
        Random rand = new Random()
        // This is a task.
        sicknessVector = createSicknessVector(sicknessMean, sicknessDev)
        pVacationVector = publicVacationVector
        // This is a task.
        int x = (int) (rand.nextGaussian() + MPLeisure)
        leisureVector = createLeisureVector(x)
        // This is a task.
        leisureDuration = (int) (leisureDurationDev * rand.nextGaussian() + leisureDurationMean)
    }

    /**
     *
     * This is the step behavior.
     * @method showStatus
     *
     */
    public def showStatus() {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // This is a task.
        System.out.println("Name = " + name)
        System.out.println("Member Of = " + getMemberOf().getName());
        System.out.println("Sickness Days = ")
        ListIterator iter = sicknessVector.listIterator();

        // This is a loop.
        while (iter.hasNext()) {

            // This is a task.
            System.out.println(iter.next());

        }

        // This is a task.
        System.out.println("Leisure Days of Week = ");
        iter = leisureVector.listIterator();

        // This is a loop.
        while (iter.hasNext()) {

            // This is a task.
            System.out.println(iter.next());

        }

        // This is a task.
        System.out.println("Leisure Duration = " + leisureDuration);
        System.out.println("Public Vacation of Year = ");
        iter = pVacationVector.listIterator();

        // This is a loop.
        while (iter.hasNext()) {

            // This is a task.
            System.out.println(iter.next());

        }

        // This is a task.
        System.out.println("Weekly Routine : ")

        // This is a loop.
        for (int i = 0; i < 7;i++) {

            // This is a task.
            System.out.println("Day " + (i))
            iter = weeklyRoutine.get(i).listIterator();

            //  
            for (int j =0;j < 96;j++) {

                // This is a task.
                System.out.println("Quarter : " + (j+1) + " Status : " + iter.next())

            }


        }

        // Return the results.
        return returnValue

    }

    /**
     *
     * This is the step behavior.
     * @method refresh
     *
     */
    public def refresh(HashMap hm) {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // This is a task.
        float leisureDurationMean = ((int)hm.get("LeisureDurationMean"))
        float leisureDurationDev = ((int)hm.get("LeisureDurationDev"))
        float MPLeisure = ((int)hm.get("MPLeisure"))
        float vacationAbsence = ((float)hm.get("VacationAbsence"))
        // This is a task.
        Random rand = new Random()
        int x = (int) (rand.nextGaussian() + MPLeisure)
        leisureDuration = (int) (leisureDurationDev * rand.nextGaussian() + leisureDurationMean)
        leisureVector = createLeisureVector(x)
        weeklyRoutine = fillWeeklyRoutine(vacationAbsence)
        // Return the results.
        return returnValue

    }

    /**
     *
     * This method provides a human-readable name for the agent.
     * @method toString
     *
     */
    @ProbeID()
    public String toString() {

        // Define the return value variable.
        def returnValue

        // Note the simulation time.
        def time = GetTickCountInTimeUnits()

        // Set the default agent identifier.
        returnValue = this.agentID
        // Return the results.
        return returnValue

    }


}

